; Simple example program to convert an
; integer into an ASCII string.
; print number with multiple digits in screen
; *********************************************************
; Data declarations

section .data
; -----
; Define constants
NULL equ 0
EXIT_SUCCESS equ 0 	; successful operation
SYS_exit equ 60 		; code for terminate
SYS_Write equ 1
STDOUT equ 1

; -----
; Define Data.
intNum dd 1498
msg db "the output",10,0
len equ $ -msg
newLine db 10,0
even db "even",10,0
lene equ $ -even
odd db "odd",10,0
leno equ $ -odd

section .bss
strNum resb 10
; *********************************************************

section .text
global _start
_start:
; Convert an integer to an ASCII string.
; -----

;determine whether odd or even
mov rax,0
mov rax,[intNum]
and rax,1			;if result after bits and operation with (00..001) is 0 then the original bit 0 was 0->even else it was 1-->odd 
cmp rax,0
je printEven
jmp printOdd

printEven:
mov rax,SYS_Write
mov rdi,STDOUT
mov rsi,even
mov rdx,lene
syscall
jmp printNum

printOdd:
mov rax,SYS_Write
mov rdi,STDOUT
mov rsi,odd
mov rdx,leno
syscall

printNum:
; Part A - Successive division
;number value in eax
;rcx the counter of number of digits
;ebx is the divisor

mov eax, dword [intNum] 	; get integer (numerator) into rax
mov rcx, 0 		; digitCount = 0
mov ebx, 10 		; set for dividing by 10

divideLoop:
mov edx, 0
div ebx 			; divide number by 10 in division the numerator will be in rax, result will be in rax, remainder in rdx
push rdx 			; push remainder
inc rcx 			; increment digitCount
cmp eax, 0 		; if (result > 0)
jne divideLoop 		; goto divideLoop

; -----
; Part B - Convert remainders and store
mov rbx, strNum 		; get addr of string that will have number digits as characters, rbx is the base address
mov rdi, 0 			; index = 0

popLoop:
pop rax 			; pop intDigit
add al, "0" 		; char = int + "0"
mov byte [rbx+rdi], al 	; string[idx] = char
inc rdi 			; increment index a Byte each time because each digit is a byte size 
loop popLoop 		; if (digitCount > 0) goto popLoop

mov byte [rbx+rdi], NULL 	; string[index] = NULL ending string with NULL

;print string number on screen
;1-print msg on screen

mov rax,SYS_Write
mov rdi,STDOUT
mov rsi,msg
mov rdx,len
syscall

;2-print string number 

mov rax,SYS_Write
mov rdi,STDOUT
mov rsi,strNum 
mov rdx,4		;if you know number of digits use it or you have to loop untill you reach NULL
syscall

; -----
; Done, terminate program.

last:
mov rax, SYS_exit 		; call code for exit
mov rdi, EXIT_SUCCESS 	; exit with success
syscall
